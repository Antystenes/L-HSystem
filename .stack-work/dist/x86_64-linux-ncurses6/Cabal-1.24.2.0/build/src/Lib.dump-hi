
==================== FINAL INTERFACE ====================
2017-02-17 20:42:34.605511747 UTC

interface L-HSystem-0.1.0.0-L23A8glBq1EKIsMBok0zK6:Lib 8002
  interface hash: 7e61f0c4f8da727387b0c8ce86a53dcc
  ABI hash: 20b73bbcf7565b23ae4e5ff7e4f8b40e
  export-list hash: 2efe3a7f5222b95a2f98e7b4e17e3ff1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bf8f5ed9f57c603c45732fbe6e5757d5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.printSys
  Lib.step
  Lib.LSys{Lib.LSys axiom rewr}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
6d2a9aca71a90a0b55e60034e282a0d3
  $tc'LSys :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10930534413042980460##
                   9697529506404015579##
                   Lib.$trModule
                   Lib.$tc'LSys1) -}
0571a6a28de204d91a5ddfc85dd683de
  $tc'LSys1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LSys"#) -}
591f8a5e166bb543690f2d46433e3d5f
  $tcLSys :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11452577168944245479##
                   10945540080595680442##
                   Lib.$trModule
                   Lib.$tcLSys1) -}
4f6ad80877fea84d14878ef76387352d
  $tcLSys1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LSys"#) -}
b2ab27b0885ccfaadc0a0607d72648db
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
dbff5572378bdfae694593ab61e4a5a4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
c5825875b130a584d35acdf5c8a80a3c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "L-HSystem-0.1.0.0-L23A8glBq1EKIsMBok0zK6"#) -}
84d1229dc19293501c6cba532c9375c2
  data LSys sym = LSys {axiom :: [sym], rewr :: sym -> [sym]}
5a540c09de61de6a5cb6032b92c5e5f3
  axiom :: Lib.LSys sym -> [sym]
  RecSel Left Lib.LSys
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ sym (ds :: Lib.LSys sym) ->
                 case ds of wild { Lib.LSys ds1 ds2 -> ds1 }) -}
296745c9e6bc811c39eca90b478c25fe
  printSys :: GHC.Show.Show sym => Lib.LSys sym -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),1*U(A,A,1*C1(C1(U)))><L,1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ sym ($dShow :: GHC.Show.Show sym) (eta :: Lib.LSys sym) ->
                 GHC.Show.showList
                   @ sym
                   $dShow
                   (case eta of wild { Lib.LSys ds ds1 -> ds })
                   (GHC.Types.[] @ GHC.Types.Char)) -}
534a6d465368971f632b187bc108e0c0
  rewr :: Lib.LSys sym -> sym -> [sym]
  RecSel Left Lib.LSys
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ sym (ds :: Lib.LSys sym) ->
                 case ds of wild { Lib.LSys ds1 ds2 -> ds2 }) -}
c0a3b5c4deccf3575e072ba9febf58be
  step :: Lib.LSys a -> Lib.LSys a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Lib.LSys a) ->
                 case ds of wild { Lib.LSys ax r ->
                 Lib.LSys @ a (GHC.Base.$fMonad[]_$c>>= @ a @ a ax r) r }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

